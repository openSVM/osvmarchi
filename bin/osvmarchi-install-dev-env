#!/bin/bash

if [[ -z "$1" ]]; then
  echo "Usage: osvmarchi-install-dev-env <ruby|node|bun|go|laravel|symfony|php|python|elixir|phoenix|rust|java|ocaml|dotnet|solana>" >&2
  exit 1
fi

install_php() {
  sudo pacman -S php composer php-sqlite --noconfirm

  # Install Path for Composer
  if [[ ":$PATH:" != *":$HOME/.config/composer/vendor/bin:"* ]]; then
    echo 'export PATH="$HOME/.config/composer/vendor/bin:$PATH"' >>"$HOME/.bashrc"
    source "$HOME/.bashrc"
    echo "Added Composer global bin directory to PATH."
  else
    echo "Composer global bin directory already in PATH."
  fi

  # Enable some extensions
  local php_ini_path="/etc/php/php.ini"
  local extensions_to_enable=(
    "bcmath"
    "intl"
    "iconv"
    "openssl"
    "pdo_sqlite"
    "pdo_mysql"
  )

  for ext in "${extensions_to_enable[@]}"; do
    sudo sed -i "s/^;extension=${ext}/extension=${ext}/" "$php_ini_path"
  done
}

install_node() {
  echo -e "Installing Node.js...\n"
  mise use --global node@lts
}

install_solana() {
  echo -e "Installing Solana CLI and development tools...\n"
  
  # Install Solana CLI via official installer
  echo "Installing Solana CLI..."
  bash -c "$(curl --proto '=https' --tlsv1.2 -sSfL https://solana-install.solana.workers.dev)" -- --version v1.18.18
  
  # Add Solana to PATH for current session
  export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
  
  # Add Solana to bashrc for future sessions
  if ! grep -q "solana/install/active_release/bin" "$HOME/.bashrc"; then
    echo 'export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"' >> "$HOME/.bashrc"
    echo "Added Solana CLI to PATH."
  fi
  
  # Install Rust (required for Anchor and other tools) if not already installed
  if ! command -v rustc &> /dev/null; then
    echo "Installing Rust (required for Solana development)..."
    bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" -- -y
    source "$HOME/.cargo/env"
  fi
  
  # Add Cargo to PATH for current session if not already there
  if [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
    export PATH="$HOME/.cargo/bin:$PATH"
  fi
  
  # Install Anchor CLI (pinned version for stability)
  echo "Installing Anchor CLI..."
  cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
  avm install 0.29.0
  avm use 0.29.0
  
  # Install SPL Token CLI
  echo "Installing SPL Token CLI..."
  cargo install spl-token-cli --version 4.0.0 --locked
  
  # Install additional Solana ecosystem tools
  echo "Installing additional Solana development tools..."
  
  # Install Solana Program Library CLI tools
  cargo install spl-token-cli --version 4.0.0 --locked --force
  cargo install spl-associated-token-account --version 3.0.2 --locked --force
  
  # Install sugar (Metaplex Candy Machine CLI)
  cargo install sugar-cli --version 2.6.0 --locked --force
  
  # Install Mollusk (Solana program testing framework)
  cargo install mollusk-cli --version 0.1.0 --locked --force
  
  echo -e "\nSolana development environment installed successfully!"
  echo "Installed tools:"
  echo "  • Solana CLI v1.18.18"
  echo "  • Anchor Framework v0.29.0 (via AVM)"
  echo "  • SPL Token CLI v4.0.0"
  echo "  • SPL Associated Token Account CLI v3.0.2"
  echo "  • Sugar (Metaplex) CLI v2.6.0"
  echo "  • Mollusk CLI v0.1.0"
  echo ""
  echo "You can now:"
  echo "  • Create Solana wallets: solana-keygen new"
  echo "  • Start test validator: solana-test-validator"
  echo "  • Create Anchor projects: anchor init my_project"
  echo "  • Deploy SPL tokens: spl-token create-token"
  echo ""
  echo "Note: Restart your terminal or run 'source ~/.bashrc' to ensure all tools are in PATH."
}

case "$1" in
ruby)
  echo -e "Installing Ruby on Rails...\n"
  mise use --global ruby@latest
  mise settings add idiomatic_version_file_enable_tools ruby
  mise x ruby -- gem install rails --no-document
  echo -e "\nYou can now run: rails new myproject"
  ;;
node)
  install_node
  ;;
bun)
  echo -e "Installing Bun...\n"
  mise use -g bun@latest
  ;;
deno)
  echo -e "Installing Deno...\n"
  mise use -g deno@latest
  ;;
go)
  echo -e "Installing Go...\n"
  mise use --global go@latest
  ;;
php)
  echo -e "Installing PHP...\n"
  install_php
  ;;
laravel)
  echo -e "Installing PHP and Laravel...\n"
  install_php
  install_node
  composer global require laravel/installer
  echo -e "\nYou can now run: laravel new myproject"
  ;;
symfony)
  echo -e "Installing PHP and Symfony...\n"
  install_php
  yay -S symfony-cli --noconfirm
  echo -e "\nYou can now run: symfony new --webapp myproject"
  ;;
python)
  echo -e "Installing Python...\n"
  mise use --global python@latest
  echo -e "\nInstalling uv...\n"
  curl -fsSL https://astral.sh/uv/install.sh | sh
  ;;
elixir)
  echo -e "Installing Elixir...\n"
  mise use --global erlang@latest
  mise use --global elixir@latest
  mise x elixir -- mix local.hex --force
  ;;
phoenix)
  echo -e "Installing Phoenix Framework...\n"
  # Ensure Erlang/Elixir first
  mise use --global erlang@latest
  mise use --global elixir@latest
  # Hex & Rebar
  mise x elixir -- mix local.hex --force
  mise x elixir -- mix local.rebar --force
  # Phoenix project (phx_new)
  mise x elixir -- mix archive.install hex phx_new --force
  echo -e "\nYou can now run: mix phx.new my_app"
  ;;
rust)
  echo -e "Installing Rust...\n"
  bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" -- -y
  ;;
java)
  echo -e "Installing Java...\n"
  mise use --global java@latest
  ;;
zig)
  echo -e "Installing Zig...\n"
  mise use --global zig@latest
  ;;
ocaml)
  echo -e "Installing OCaml...\n"
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"
  opam init --yes
  eval "$(opam env)"
  opam install ocaml-lsp-server odoc ocamlformat utop --yes
  ;;
dotnet)
  echo -e "Installing .NET...\n"
  mise use --global dotnet@latest
  ;;
solana)
  install_solana
  ;;
esac
